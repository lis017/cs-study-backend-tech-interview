JVM의 구조와 Java의 실행방식을 설명해주세요.
-> JVM의 역할은 자바 애플리케이션을 클래스 로더를 통해 읽어 자바 API와 함께 실행하는 것입니다.
-> JVM의 구조는 Class Loader, Execution engine, Runtime Data Area, JNI, Native Method Library로
    이루어져 있습니다.
-> Java의 실행방식
  자바 컴파일러(javac)가 자바 소스코드(.java)를 읽어 자바 바이트코드(.class)로 변환시킵니다.
  Class Loader를 통해 class 파일들을 JVM으로 로딩합니다.
  로딩된 class파일들은 Execution engine을 통해 해석됩니다.
  해석된 바이트코드는 Runtime Data Areas 에 배치되어 실질적인 수행이 이루어집니다.

GC가 무엇인지, 필요한 이유는 무엇인지, 동작방식에 대해 설명해주세요.
-> GC는 힙 영역에서 사용하지 않는 객체들을 제거하는 작업을 총칭합니다.
-> 필요한 이유: 자바는 개발자가 메모리를 직접 해제해줄 수 없는 언어이기 때문입니다.
-> 동작 방식은, GC는 Minor GC, Major GC로 구분할 수 있습니다. Minor GC는 young 영역에서,
    Major GC는 old 영역에서 일어난다고 정의합니다.
-> Minor GC는 Eden 영역이 가득 참에서 부터 시작됩니다.
    Eden 영역에서 참조가 남아있는 객체를 mark하고 survivor 영역으로 복사합니다. 
    그리고 Eden 영역을 비웁니다. Survivor 영역도 가득차면 같은 방식으로 
    다른 Survivor 영역에 복사하고 비웁니다. 이를 반복하다 보면 계속 해서 살아남는 객체는
    old 영역으로 이동하게 됩니다.
-> Major GC는 old 영역에서 일어납니다. 위와 반대로 삭제되어야 하는 객체를 mark합니다.
    그리고 지웁(sweep)니다.

컬렉션 프레임워크에 대해서 설명해주세요.
-> Java Collection은 널리 알려져 있는 자료구조를 바탕으로 객체, 데이터들을 효율적으로 관리 할 수 있는
    자료구조들이 있는 라이브러리를 컬렉션 프레임워크라고 합니다.
-> List, Set은 Collection 인터페이스을 상속받지만, Map 인터페이스는 구조상의 차이로 별도로 정의합니다.

제네릭에 대해서 설명해주세요.
->  컴파일 과정에서 타입체크를 해주는 기능으로 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여줌

애노테이션에 대해서 설명해주세요.
-> 애노테이션은 인터페이스를 기반으로 한 문법으로 주석처럼 코드에 달아 클래스에 특별한 의미를 부여하거나 기능을 주입할 수 있습니다.

오버라이딩과 오버로딩이 무엇이며 어떤 차이가 있을까요?
-> 오버라이딩은 상위 클래스의 메소드를 재정의 하는 것
-> 오버로딩은 같은 클래스 내에서 동일한 메소드 이름을 가지지만, 매개변수의 타입, 개수가 다르게 구현할 수 있는 것을 의미
    ,오버라이딩 될 수 있습니다.
-> 추가로 `@Override`를 써야하는 이유:
    이 애노테이션은 컴파일 타임에 오버라이딩에 대한 안정성을 부여해주기 때문에 반드시 써주는 것이 좋습니다.

인터페이스와 추상클래스의 차이점에 대해 설명해주세요.
-> 인터페이스는 구현 객체가 같은 동작을 한다는 것을 보장하기 위해 사용합니다. 다중 상속이 가능합니다. 
    인터페이스를 구현하는 집합간에는 관계가 없을 수 있습니다.
-> 추상클래스는 객체의 추상적인 상위 개념으로 공통된 개념을 표현할 때 사용합니다. 단일 상속만 가능합니다.
    추상클래스를 상속하는 집합간에는 연관관계가 있습니다.

클래스는 무엇이고 객체는 무엇인가요?
-> 클래스는 객체를 정의하는 틀 또는 설계도와 같은 의미
-> 객체는 인스턴스들을 통칭하는 용도로 사용합니다.

정적(static)이란 무엇인가요?
-> Static(정적)은 프로그램이 시작되는 시점에 클래스 로더가 클래스를 해석하여
    메소드 영역 혹은 힙 영역에 클래스 메타 데이터 및 정적 변수 등을 적재한다.








    

    
