★★★--------------------------------------------------------------------------------------------------------------------------
뮤텍스와 세마포어란?
  -> 공유자원에 스레드, 프로세스가 동시에 몰리는것을 방지하는 동기화 도구입니다.
  -> 병렬 프로그래밍을 할때 사용됨  

뮤텍스와 세마포어의 차이는?
  -> 뮤텍스는 한 스레드와 프로세스가 가질수있는 키를 기반으로 관리함.
    세마포어는 현재 공유자원에 접근할수있는 스레드와 프로세스의 수를 기반으로 관리함.
-> 세마포어는 뮤텍스가 될수있지만, 반대는 불가

(뮤텍스와 세마포어) 생길수 있는 문제는?
    -> 쓰더라도, 데드락이 발생할수 있음.

데드락(교착상태)이란?
      -서로 다른 프로세스(or스레드)가 서로 점유하고 있는 자원의 반납을 대기하고 있는 상태가 지속되는것.
/* 심화(꼬리질문)
발생조건

상호 배제: 한 번에 한 프로세스만 해당 자원을 사용할 수 있어야 합니다.
점유 대기: 할당된 자원을 가진 상태에서 다른 자원을 기다립니다.
비선점: 다른 프로세스가 자원의 사용을 끝낼 때 까지 자원을 뺏을 수 없습니다.
순환대기: 각 프로세스가 순환적으로 다음 프로세스가 요구하는 자원을 가지고 있습니다.
해결방법

예방: 4가지 조건 중 하나라도 만족되지 않도록 합니다.
회피: 알고리즘을 데드락이 발생하지 않도록 합니다.
회복: 교착상태가 발생할 때, 해결합니다.
무시: 회복과정의 성능저하가 심하다면 그냥 무시합니다.
*/

기아상태란?
 -> 여러 프로세스가 부족한 자원을 점유하기 위해 경쟁할 때, 특정 프로세스가 영원히 자원 할당이 되지 않는 경우
//꼬리질문
해결법은? -> 우선순위를 변경합니다.(우선순위를 수시로 변경하거나, 오래 기다린 프로세스의 우선순위를 높여주거나, Queue를 사용합니다.)

프로세스와 스레드의 차이를 설명해보세요.
-> 프로세스는 실행중인 프로그램을 의미, 스레드는 실행 제어만 분리한 것을 의미
-> 프로세스는 운영체제로부터 자원을 할당받지만, 
스레드는 프로세스로부터 자원을 할당받고, 프로세스의 코드/데이터/힙영역을 공유하기 때문에 좀 더 효율적으로 통신할 수 있습니다. 

컨텍스트 스위칭에 대해 설명해보세요.
-> 컨텍스트 스위칭은 한 Task가 끝날 때까지 기다리는 것이 아니라 여러 작업을 번갈아가며 실행해서 동시에 처리될 수 있도록 하는 방법입니다.
-> 잦은 컨텍스트 스위칭은 성능저하를 일으킬 수 있습니다.

동기와 비동기의 차이(블로킹, 넌블로킹) / 장단점에 대해 설명해보세요.
-> 동기/비동기는 두 개 이상의 무엇인가가 시간을 맞춘다/안맞춘다로 구분할 수 있습니다.
-> 동기 방식은 한 함수가 끝나는 시간과 바로 다음의 함수가 시작하는 시간이 같습니다.
-> 비동기 방식은 여러 개의 처리가 함께 실행되는 방식으로, 동기 방식에 비해 단위시간 당 많은 작업을 처리할 수 있습니다.
단, CPU나 메모리를 많이 사용하는 작업을 비동기로 처리하게 되면 과부하가 걸릴 수 있습니다.

멀티스레드 프로그래밍에 대해 설명해보세요.
-> 멀티스레드 프로그래밍은 하나의 프로세스에서 여러개의 스레드를 만들어 자원의 생성과 관리의 중복을 최소화하는 것을 
멀티스레드 프로그래밍이라고 합니다.
-> 장점
멀티 프로세스에 비해 메모리 자원소모가 줄어듭니다.
힙 영역을 통해서 스레드간 통신이 가능해서 프로세스간 통신보다 간단합니다.
스레드의 컨텍스트 스위칭은 프로세스의 컨텍스트 스위칭보다 빠릅니다.
-> 단점
힙 영역에 있는 자원을 사용할 때는 동기화를 해야합니다.
동기화를 위해서 락을 과도하게 사용하면 성능이 저하될 수 있습니다.
하나의 스레드가 비정상적으로 동작하면 다른 스레드도 종료될 수 있습니다.









